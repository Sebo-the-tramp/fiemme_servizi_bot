# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ] 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Prepare libraries to be uploaded
        run: |          
          pip install -r ./libraries/requirements.txt -t ./libraries/python
          cp ./code/utils/db_utils.py ./libraries/python/db_utils.py
          cd ./libraries/python
          zip -qq -r python.zip .
          
      - uses: actions/upload-artifact@v2
        with:
          name: python.zip
          path: ./libraries/python/python.zip

  test:  
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      # Use the artifact as the variables
      # Runs a single command using the runners shell
      - name: Set up the environment
        run: |
          pip install -r ./libraries/requirements.txt
  
      # Runs a single command using the runners shell
      - name: Test the python executable
        run: |
          pwd
          cd ./code
          python -m unittest tests.send_message_test
          
          
  terraform:  
    name: 'Terraform'    
    needs: test
    runs-on: ubuntu-latest
    steps:       
    
    - name: Checkout  
      uses: actions/checkout@v2          
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:   
      # terraform_version: 0.13.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Change directory
      run: cd ./terraform
    
    - name: Terraform Format  
      id: fmt 
      # check if the terraform files are formated correctly
      run: terraform fmt -check
    
    - name: Terraform Init
      id: init 
      run: terraform init
    
    - name: Terraform Validate
      id: validate  
      run: terraform validate -no-color
      
    - name: Terraform Plan 
      id: plan 
      if: github.event_name == 'pull_request' 
      run: terraform plan -no-color 
      continue-on-error: true

    #creates a comment about the terraform plan inside the merge request 
    - name: Update Pull Request  
      uses: actions/github-script@0.9.0 
      if: github.event_name == 'pull_request' 
      env:    
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}" 
      with:   
        github-token: ${{ secrets.GITHUB_TOKEN }}   
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\` 
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`  
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`  
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      
          <details><summary>Show Plan</summary>
      
          \`\`\`\n      ${process.env.PLAN}      \`\`\`
      
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,   
            repo: context.repo.repo,  
            body: output   
          })

    - name: Terraform Plan Status 
      if: steps.plan.outcome == 'failure' 
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'  
      run: terraform apply -auto-approve
  
  upload:  
    needs: terraform    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      
      - name: prepare files
        run: |
          mkdir upload
          mkdir upload/send_message
          mkdir upload/modify_data
          cp ./code/new/modify.py ./upload/modify_data/modify.py
          cp ./code/utils/db_utils.py ./upload/modify_data/db_utils.py
          cp ./code/new/send_message.py ./upload/send_message/send_message.py
          cp ./code/utils/db_utils.py ./upload/send_message/db_utils.py
        
      - name: use zip
        uses: montudor/action-zip@v1
      
      - name: build zip for modify data
        run: |
          cd upload/modify_data
          zip -qq -r modify_data.zip .
          mv modify_data.zip ../../
          
      - name: Deploy to aws function 
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: modifyData
          zip_file: modify_data.zip
          
      

  
            
